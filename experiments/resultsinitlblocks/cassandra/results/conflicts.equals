C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06176;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06176;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06176
<<<<<<< MINE
        case 4: // ENDPOINT_DETAILS
          return ENDPOINT_DETAILS;
=======
        case 4: // RPC_ENDPOINTS
          return RPC_ENDPOINTS;
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
        case 5: // ENDPOINT_DETAILS
          return ENDPOINT_DETAILS;
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
              org.apache.thrift.protocol.TMap _map56 = iprot.readMapBegin();
              this.strategy_options = new HashMap<String,String>(2*_map56.size);
              for (int _i57 = 0; _i57 < _map56.size; ++_i57)
=======
              org.apache.thrift.protocol.TMap _map37 = iprot.readMapBegin();
              this.strategy_options = new HashMap<String,String>(2*_map37.size);
              for (int _i38 = 0; _i38 < _map37.size; ++_i38)
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
              org.apache.thrift.protocol.TList _list65 = iprot.readListBegin();
              this.columns = new ArrayList<Column>(_list65.size);
              for (int _i66 = 0; _i66 < _list65.size; ++_i66)
=======
              org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
              this.columns = new ArrayList<Column>(_list46.size);
              for (int _i47 = 0; _i47 < _list46.size; ++_i47)
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
              org.apache.thrift.protocol.TList _list79 = iprot.readListBegin();
              this.rows = new ArrayList<CqlRow>(_list79.size);
              for (int _i80 = 0; _i80 < _list79.size; ++_i80)
=======
              org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
              this.rows = new ArrayList<CqlRow>(_list50.size);
              for (int _i51 = 0; _i51 < _list50.size; ++_i51)
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
              org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
              this.column_metadata = new ArrayList<ColumnDef>(_list42.size);
              for (int _i43 = 0; _i43 < _list42.size; ++_i43)
=======
              org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
              this.column_metadata = new ArrayList<ColumnDef>(_list33.size);
              for (int _i34 = 0; _i34 < _list33.size; ++_i34)
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                this.success = new ArrayList<ColumnOrSuperColumn>(_list83.size);
                for (int _i84 = 0; _i84 < _list83.size; ++_i84)
=======
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                this.success = new ArrayList<ColumnOrSuperColumn>(_list54.size);
                for (int _i55 = 0; _i55 < _list54.size; ++_i55)
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
              org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
              this.credentials = new HashMap<String,String>(2*_map32.size);
              for (int _i33 = 0; _i33 < _map32.size; ++_i33)
=======
              org.apache.thrift.protocol.TMap _map28 = iprot.readMapBegin();
              this.credentials = new HashMap<String,String>(2*_map28.size);
              for (int _i29 = 0; _i29 < _map28.size; ++_i29)
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b14248;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a14248;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c14248
<<<<<<< MINE
                org.apache.thrift.protocol.TList _list165 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list165.size);
                for (int _i166 = 0; _i166 < _list165.size; ++_i166)
=======
                org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list160.size);
                for (int _i161 = 0; _i161 < _list160.size; ++_i161)
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b02704;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a02704;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c02704
<<<<<<< MINE
      processMap.put("trace_next_query", new trace_next_query());
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
    this.speculative_retry = "NONE";

=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b07844;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a07844;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c07844
<<<<<<< MINE
        valueMap.put(ITEM_NAMES[5], toArrayOfCompositeData(sessionInfo.getReceivingFiles(), fromProgressInfo));
        valueMap.put(ITEM_NAMES[6], toArrayOfCompositeData(sessionInfo.getSendingFiles(), fromProgressInfo));
        valueMap.put(ITEM_NAMES[7], sessionInfo.sessionIndex);
=======
        valueMap.put(ITEM_NAMES[6], toArrayOfCompositeData(sessionInfo.getReceivingFiles(), fromProgressInfo));
        valueMap.put(ITEM_NAMES[7], toArrayOfCompositeData(sessionInfo.getSendingFiles(), fromProgressInfo));
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06116;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06116;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06116
<<<<<<< MINE
        String currentTable = "table_" + seqNumber.getAndIncrement();
        tables.add(currentTable);
        String fullQuery = formatQuery(query);
=======
        String currentTable = createTableName();
        String fullQuery = String.format(query, KEYSPACE + "." + currentTable);
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b13000;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a13000;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c13000
<<<<<<< MINE
        String state = epState.getStatus();
        if (state.isEmpty())
=======
        String status = getGossipStatus(epState);
        if (status.isEmpty())
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b14184;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a14184;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c14184
<<<<<<< MINE
            logger.trace("Updating heartbeat state version to {} from {} for {} ...", localState.getHeartBeatState().getHeartBeatVersion(), oldVersion, addr);

=======
            logger.trace("Updating heartbeat state version to " + localState.getHeartBeatState().getHeartBeatVersion() + " from " + oldVersion + " for " + addr + " ...");
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b12980;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a12980;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c12980
<<<<<<< MINE
                    logger.info("FatClient {} has been silent for {}ms, removing from gossip", endpoint, fatClientTimeout);
=======
                    logger.info("FatClient {} has been silent for {}ms, removing from gossip", endpoint, FatClientTimeout);
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b13912;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a13912;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c13912
<<<<<<< MINE
            logger.trace("Updating heartbeat state version to {} from {} for {} ...", localState.getHeartBeatState().getHeartBeatVersion(), oldVersion, addr);
=======
            logger.trace("Updating heartbeat state version to " + localState.getHeartBeatState().getHeartBeatVersion() + " from " + oldVersion + " for " + addr + " ...");
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b07520;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a07520;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c07520
<<<<<<< MINE
            onTopologyChange(endpoint, Event.TopologyChange.newNode(getRpcAddress(endpoint), server.socket.getPort()));
=======
            send(endpoint, Event.TopologyChange.newNode(getRpcAddress(endpoint), server.socket.getPort()));
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b10556;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a10556;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c10556
<<<<<<< MINE
                        logger.trace("Adding state {}: {}" , key, value.value);
                    reqdEndpointState.addApplicationState(key, value);
=======
                        logger.trace("Adding state " + key + ": " + value.value);

                    states.put(key, value);
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b04256;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a04256;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c04256
<<<<<<< MINE
        // Delete any failed snapshot deletions on Windows - see CASSANDRA-9658
        if (FBUtilities.isWindows())
            WindowsFailedSnapshotTracker.deleteOldSnapshots();
=======
        FileUtils.setFSErrorHandler(new DefaultFSErrorHandler());

        try
        {
            logger.info("Hostname: {}", InetAddress.getLocalHost().getHostName());
        }
        catch (UnknownHostException e1)
        {
            logger.info("Could not resolve local host");
        }
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b12044;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a12044;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c12044
<<<<<<< MINE
        ScheduledExecutors.optionalTasks.schedule(viewRebuild, StorageService.RING_DELAY, TimeUnit.MILLISECONDS);

        Mx4jTool.maybeLoad();
=======
        // Metrics
        String metricsReporterConfigFile = System.getProperty("cassandra.metricsReporterConfigFile");
        if (metricsReporterConfigFile != null)
        {
            logger.info("Trying to load metrics-reporter-config from file: {}", metricsReporterConfigFile);
            try
            {
                // enable metrics provided by metrics-jvm.jar
                CassandraMetricsRegistry.Metrics.register("jvm.buffers.", new BufferPoolMetricSet(ManagementFactory.getPlatformMBeanServer()));
                CassandraMetricsRegistry.Metrics.register("jvm.gc.", new GarbageCollectorMetricSet());
                CassandraMetricsRegistry.Metrics.register("jvm.memory.", new MemoryUsageGaugeSet());
                CassandraMetricsRegistry.Metrics.register("jvm.fd.usage", new FileDescriptorRatioGauge());
                // initialize metrics-reporter-config from yaml file
                String reportFileLocation = CassandraDaemon.class.getClassLoader().getResource(metricsReporterConfigFile).getFile();
                ReporterConfig.loadFromFile(reportFileLocation).enableAll(CassandraMetricsRegistry.Metrics);
            }
            catch (Exception e)
            {
                logger.warn("Failed to load metrics-reporter-config, metric sinks will not be activated", e);
            }
        }
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b08808;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a08808;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c08808
<<<<<<< MINE
        // Prepared statements
        QueryProcessor.preloadPreparedStatement();
=======
        // start server internals
        StorageService.instance.registerDaemon(this);
        try
        {
            StorageService.instance.initServer();
        }
        catch (ConfigurationException e)
        {
            System.err.println(e.getMessage() + "\nFatal configuration error; unable to start server.  See log for stacktrace.");
            exitOrFail(1, "Fatal configuration error", e);
        }
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09696;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09696;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09696
<<<<<<< MINE
            applyConfig();
=======
            try
            {
                DatabaseDescriptor.forceStaticInitialization();
                DatabaseDescriptor.setDaemonInitialized();
            }
            catch (ExceptionInInitializerError e)
            {
                throw e.getCause();
            }
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b03584;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a03584;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c03584
<<<<<<< MINE
     *  Do a single 'shadow' round of gossip, where we do not modify any state
     *  Used when preparing to join the ring:
     *      * when replacing a node, to get and assume its tokens
     *      * when joining, to check that the local host id matches any previous id for the endpoint address
=======
     * Do a single 'shadow' round of gossip by retrieving endpoint states that will be stored exclusively in the
     * map return value, instead of endpointStateMap.
     *
     * Used when preparing to join the ring:
     * <ul>
     *     <li>when replacing a node, to get and assume its tokens</li>
     *     <li>when joining, to check that the local host id matches any previous id for the endpoint address</li>
     * </ul>
     *
     * Method is synchronized, as we use an in-progress flag to indicate that shadow round must be cleared
     * again by calling {@link Gossiper#finishShadowRound(Map)}. This will update
     * {@link Gossiper#endpointShadowStateMap} with received values, in order to return an immutable copy to the
     * caller of {@link Gossiper#doShadowRound()}. Therefor only a single shadow round execution is permitted at
     * the same time.
     *
     * @return endpoint states gathered during shadow round or empty map
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b03012;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a03012;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c03012
<<<<<<< MINE
=======
        // enable auto compaction
        for (Keyspace keyspace : Keyspace.all())
        {
            for (ColumnFamilyStore cfs : keyspace.getColumnFamilyStores())
            {
                for (final ColumnFamilyStore store : cfs.concatWithIndexes())
                {
                    if (store.getCompactionStrategyManager().shouldBeEnabled())
                        store.enableAutoCompaction();
                }
            }
        }

        Runnable viewRebuild = new Runnable()
        {
            @Override
            public void run()
            {
                for (Keyspace keyspace : Keyspace.all())
                {
                    keyspace.viewManager.buildAllViews();
                }
                logger.debug("Completed submission of build tasks for any materialized views defined at startup");
            }
        };

        ScheduledExecutors.optionalTasks.schedule(viewRebuild, StorageService.RING_DELAY, TimeUnit.MILLISECONDS);

>>>>>>> YOURS
