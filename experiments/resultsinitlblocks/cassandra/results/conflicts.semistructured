C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06176;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06176;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06176
<<<<<<< MINE
=======
/**
 * A TokenRange describes part of the Cassandra ring, it is a mapping from a range to
 * endpoints responsible for that range.
 * @param start_token The first token in the range
 * @param end_token The last token in the range
 * @param endpoints The endpoints responsible for the range (listed by their configured listen_address)
 * @param rpc_endpoints The endpoints responsible for the range (listed by their configured rpc_address)
 */
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
    lastComparison = Boolean.valueOf(isSetEndpoint_details()).compareTo(typedOther.isSetEndpoint_details());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndpoint_details()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpoint_details, typedOther.endpoint_details);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
                org.apache.thrift.protocol.TMap _map117 = iprot.readMapBegin();
                this.mutation_map = new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2*_map117.size);
                for (int _i118 = 0; _i118 < _map117.size; ++_i118)
                {
                  ByteBuffer _key119;
                  Map<String,List<Mutation>> _val120;
                  _key119 = iprot.readBinary();
                  {
                    org.apache.thrift.protocol.TMap _map121 = iprot.readMapBegin();
                    _val120 = new HashMap<String,List<Mutation>>(2*_map121.size);
                    for (int _i122 = 0; _i122 < _map121.size; ++_i122)
=======
                org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin();
                this.mutation_map = new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2*_map88.size);
                for (int _i89 = 0; _i89 < _map88.size; ++_i89)
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
                      String _key123;
                      List<Mutation> _val124;
                      _key123 = iprot.readString();
=======
                  ByteBuffer _key90;
                  Map<String,List<Mutation>> _val91;
                  _key90 = iprot.readBinary();
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
                        org.apache.thrift.protocol.TList _list125 = iprot.readListBegin();
                        _val124 = new ArrayList<Mutation>(_list125.size);
                        for (int _i126 = 0; _i126 < _list125.size; ++_i126)
=======
                    org.apache.thrift.protocol.TMap _map92 = iprot.readMapBegin();
                    _val91 = new HashMap<String,List<Mutation>>(2*_map92.size);
                    for (int _i93 = 0; _i93 < _map92.size; ++_i93)
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a09480;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c09480
<<<<<<< MINE
                          Mutation _elem127;
                          _elem127 = new Mutation();
                          _elem127.read(iprot);
                          _val124.add(_elem127);
=======
                      String _key94;
                      List<Mutation> _val95;
                      _key94 = iprot.readString();
                      {
                        org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                        _val95 = new ArrayList<Mutation>(_list96.size);
                        for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                        {
                          Mutation _elem98;
                          _elem98 = new Mutation();
                          _elem98.read(iprot);
                          _val95.add(_elem98);
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b02704;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a02704;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c02704
<<<<<<< MINE
/**
     * @Deprecated This is now a no-op. Please use the CQL3 specific methods instead.
     * 
     * @param version
     */
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b02704;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a02704;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c02704
<<<<<<< MINE
                org.apache.thrift.protocol.TList _list187 = iprot.readListBegin();
                this.success = new ArrayList<CfSplit>(_list187.size);
                for (int _i188 = 0; _i188 < _list187.size; ++_i188)
                {
                  CfSplit _elem189; // required
                  _elem189 = new CfSplit();
                  _elem189.read(iprot);
                  this.success.add(_elem189);
=======
                org.apache.thrift.protocol.TList _list173 = iprot.readListBegin();
                this.success = new ArrayList<CfSplit>(_list173.size);
                for (int _i174 = 0; _i174 < _list173.size; ++_i174)
                {
                  CfSplit _elem175; // required
                  _elem175 = new CfSplit();
                  _elem175.read(iprot);
                  this.success.add(_elem175);
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b02704;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a02704;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c02704
<<<<<<< MINE
          for (CfSplit _iter190 : this.success)
          {
            _iter190.write(oprot);
=======
          for (CfSplit _iter176 : this.success)
          {
            _iter176.write(oprot);
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
private static final int __ROW_CACHE_SIZE_ISSET_ID = 12;
=======
private static final int __ROW_CACHE_SIZE_ISSET_ID = 9;
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
private static final int __KEY_CACHE_SIZE_ISSET_ID = 13;
=======
private static final int __KEY_CACHE_SIZE_ISSET_ID = 10;
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
private static final int __ROW_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID = 14;
=======
private static final int __ROW_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID = 11;
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
private static final int __KEY_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID = 15;
=======
private static final int __KEY_CACHE_SAVE_PERIOD_IN_SECONDS_ISSET_ID = 12;
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
private static final int __MEMTABLE_FLUSH_AFTER_MINS_ISSET_ID = 16;
=======
private static final int __MEMTABLE_FLUSH_AFTER_MINS_ISSET_ID = 13;
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
private static final int __MEMTABLE_THROUGHPUT_IN_MB_ISSET_ID = 17;
=======
private static final int __MEMTABLE_THROUGHPUT_IN_MB_ISSET_ID = 14;
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
private static final int __MEMTABLE_OPERATIONS_IN_MILLIONS_ISSET_ID = 18;
=======
private static final int __MEMTABLE_OPERATIONS_IN_MILLIONS_ISSET_ID = 15;
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
private static final int __MERGE_SHARDS_CHANCE_ISSET_ID = 19;
=======
private static final int __MERGE_SHARDS_CHANCE_ISSET_ID = 16;
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
private static final int __ROW_CACHE_KEYS_TO_SAVE_ISSET_ID = 20;
=======
private static final int __ROW_CACHE_KEYS_TO_SAVE_ISSET_ID = 17;
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULATE_IO_CACHE_ON_FLUSH_ISSET_ID, value);
=======
    __isset_bit_vector.set(__POPULATE_IO_CACHE_ON_FLUSH_ISSET_ID, value);
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
/**
     * Executes a CQL3 (Cassandra Query Language) statement and returns a
     * CqlResult containing the results.
     * 
     * @param query
     * @param compression
     * @param consistency
     */
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
/**
     * Prepare a CQL3 (Cassandra Query Language) statement by compiling and returning
     * - the type of CQL statement
     * - an id token of the compiled CQL stored on the server side.
     * - a count of the discovered bound markers in the statement
     * 
     * @param query
     * @param compression
     */
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
/**
     * Executes a prepared CQL3 (Cassandra Query Language) statement by passing an id token, a list of variables
     * to bind, and the consistency level, and returns a CqlResult containing the results.
     * 
     * @param itemId
     * @param values
     * @param consistency
     */
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
=======
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.success.size()));
          for (Map.Entry<String, String> _iter186 : this.success.entrySet())
          {
            oprot.writeString(_iter186.getKey());
            oprot.writeString(_iter186.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
=======
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.success.size()));
          for (String _iter190 : this.success)
          {
            oprot.writeString(_iter190);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06872;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06872
<<<<<<< MINE
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
=======
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (CfSplit _iter194 : this.success)
          {
            _iter194.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06332;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06332;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06332
<<<<<<< MINE
// TODO: should we be using the GlobalEventExecutor or defining our own?
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06332;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06332;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06332
<<<<<<< MINE
=======
public ChannelPipeline getPipeline() throws Exception
        {
            SSLEngine sslEngine = sslContext.createSSLEngine();
            sslEngine.setUseClientMode(false);
            sslEngine.setEnabledCipherSuites(encryptionOptions.cipher_suites);
            sslEngine.setNeedClientAuth(encryptionOptions.require_client_auth);
            sslEngine.setEnabledProtocols(new String[] {"SSLv2Hello", "TLSv1", "TLSv1.1", "TLSv1.2"});
            
            SslHandler sslHandler = new SslHandler(sslEngine);
            sslHandler.setIssueHandshake(true);
            ChannelPipeline pipeline = super.getPipeline();
            pipeline.addFirst("ssl", sslHandler);
            return pipeline;
        }
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b10112;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a10112;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c10112
<<<<<<< MINE
// TODO: should we be using the GlobalEventExecutor or defining our own?
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b10112;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a10112;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c10112
<<<<<<< MINE
=======
public ChannelPipeline getPipeline() throws Exception
        {
            SSLEngine sslEngine = sslContext.createSSLEngine();
            sslEngine.setUseClientMode(false);
            sslEngine.setEnabledCipherSuites(encryptionOptions.cipher_suites);
            sslEngine.setNeedClientAuth(encryptionOptions.require_client_auth);
            sslEngine.setEnabledProtocols(SSLFactory.ACCEPTED_PROTOCOLS);
            
            SslHandler sslHandler = new SslHandler(sslEngine);
            sslHandler.setIssueHandshake(true);
            ChannelPipeline pipeline = super.getPipeline();
            pipeline.addFirst("ssl", sslHandler);
            return pipeline;
        }
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b04200;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a04200;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c04200
<<<<<<< MINE
// TODO: should we be using the GlobalEventExecutor or defining our own?
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b04200;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a04200;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c04200
<<<<<<< MINE
=======
public ChannelPipeline getPipeline() throws Exception
        {
            ChannelPipeline pipeline = Channels.pipeline();

            // Add the ConnectionLimitHandler to the pipeline if configured to do so.
            if (DatabaseDescriptor.getNativeTransportMaxConcurrentConnections() > 0
                    || DatabaseDescriptor.getNativeTransportMaxConcurrentConnectionsPerIp() > 0)
            {
                // Add as first to the pipeline so the limit is enforced as first action.
                pipeline.addFirst("connectionLimitHandler", connectionLimitHandler);
            }

            //pipeline.addLast("debug", new LoggingHandler());

            pipeline.addLast("frameDecoder", new Frame.Decoder(server.connectionFactory));
            pipeline.addLast("frameEncoder", frameEncoder);

            pipeline.addLast("frameDecompressor", frameDecompressor);
            pipeline.addLast("frameCompressor", frameCompressor);

            pipeline.addLast("messageDecoder", messageDecoder);
            pipeline.addLast("messageEncoder", messageEncoder);

            pipeline.addLast("executor", server.executionHandler);

            pipeline.addLast("dispatcher", dispatcher);

            return pipeline;
        }
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b01640;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a01640;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c01640
<<<<<<< MINE
// TODO: should we be using the GlobalEventExecutor or defining our own?
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b06116;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a06116;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c06116
<<<<<<< MINE
        schemaChange(String.format("CREATE KEYSPACE IF NOT EXISTS %s WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}", KEYSPACE_PER_TEST));
=======
        schemaChange(String.format("CREATE KEYSPACE IF NOT EXISTS %s WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}", KEYSPACE));
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b00912;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a00912;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c00912
<<<<<<< MINE
=======
/**
     * A fat client is a node that has not joined the ring, therefore acting as a coordinator only.
     *
     * @param endpoint - the endpoint to check
     * @return true if it is a fat client
     */
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b13000;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a13000;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c13000
<<<<<<< MINE
=======
/**
     * A fat client is a node that has not joined the ring, therefore acting as a coordinator only.
     *
     * @param endpoint - the endpoint to check
     * @return true if it is a fat client
     */
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b12980;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a12980;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c12980
<<<<<<< MINE
    /** Maximum difference in generation and version values we are willing to accept about a peer */
=======
    /** Maximimum difference in generation and version values we are willing to accept about a peer */
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b12980;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a12980;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c12980
<<<<<<< MINE
        logger.warn("Gossiper.unsafeAssassinateEndpoint is deprecated and will be removed in the next release; use assassinateEndpoint instead");
        assassinateEndpoint(address);
=======
        InetAddress endpoint = InetAddress.getByName(address);
        EndpointState epState = endpointStateMap.get(endpoint);
        Collection<Token> tokens = null;
        logger.warn("Assassinating {} via gossip", endpoint);

        if (epState == null)
        {
            epState = new EndpointState(new HeartBeatState((int) ((System.currentTimeMillis() + 60000) / 1000), 9999));
        }
        else
        {
            try
            {
                tokens = StorageService.instance.getTokenMetadata().getTokens(endpoint);
            }
            catch (Throwable th)
            {
                JVMStabilityInspector.inspectThrowable(th);
                // TODO this is broken
                logger.warn("Unable to calculate tokens for {}.  Will use a random one", address);
                tokens = Collections.singletonList(StorageService.getPartitioner().getRandomToken());
            }
            int generation = epState.getHeartBeatState().getGeneration();
            logger.info("Sleeping for {}ms to ensure {} does not change", StorageService.RING_DELAY, endpoint);
            Uninterruptibles.sleepUninterruptibly(StorageService.RING_DELAY, TimeUnit.MILLISECONDS);
            // make sure it did not change
            EndpointState newState = endpointStateMap.get(endpoint);
            if (newState == null)
                logger.warn("Endpoint {} disappeared while trying to assassinate, continuing anyway", endpoint);
            else if (newState.getHeartBeatState().getGeneration() != generation)
                throw new RuntimeException("Endpoint " + endpoint + " generation changed while trying to remove it");
            epState.updateTimestamp(); // make sure we don't evict it too soon
            epState.getHeartBeatState().forceNewerGenerationUnsafe();
        }

        // do not pass go, do not collect 200 dollars, just gtfo
        epState.addApplicationState(ApplicationState.STATUS, StorageService.instance.valueFactory.left(tokens, computeExpireTime()));
        handleMajorStateChange(endpoint, epState);
        Uninterruptibles.sleepUninterruptibly(intervalInMillis * 4, TimeUnit.MILLISECONDS);
        logger.warn("Finished assassinating {}", endpoint);
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b07520;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a07520;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c07520
<<<<<<< MINE
            onStatusChange(endpoint, Event.StatusChange.nodeDown(getRpcAddress(endpoint), server.socket.getPort()));
=======
            Event.StatusChange.Status prev = lastStatusChange.put(endpoint, Event.StatusChange.Status.DOWN);
            if (prev == null || prev != Event.StatusChange.Status.DOWN)
                send(endpoint, Event.StatusChange.nodeDown(getRpcAddress(endpoint), server.socket.getPort()));
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b11600;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a11600;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c11600
<<<<<<< MINE
=======
private void run()
    {
        // Configure the server.
        eventExecutorGroup = new RequestThreadPoolExecutor();

        boolean hasEpoll = enableEpoll ? Epoll.isAvailable() : false;
        if (hasEpoll)
        {
            workerGroup = new EpollEventLoopGroup();
            logger.info("Netty using native Epoll event loop");
        }
        else
        {
            workerGroup = new NioEventLoopGroup();
            logger.info("Netty using Java NIO event loop");
        }

        ServerBootstrap bootstrap = new ServerBootstrap()
                                    .group(workerGroup)
                                    .channel(hasEpoll ? EpollServerSocketChannel.class : NioServerSocketChannel.class)
                                    .childOption(ChannelOption.TCP_NODELAY, true)
                                    .childOption(ChannelOption.SO_LINGER, 0)
                                    .childOption(ChannelOption.SO_KEEPALIVE, DatabaseDescriptor.getRpcKeepAlive())
                                    .childOption(ChannelOption.ALLOCATOR, CBUtil.allocator)
                                    .childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, 32 * 1024)
                                    .childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, 8 * 1024);

        final EncryptionOptions.ClientEncryptionOptions clientEnc = DatabaseDescriptor.getClientEncryptionOptions();
        if (clientEnc.enabled)
        {
            if (clientEnc.optional)
            {
                logger.info("Enabling optionally encrypted CQL connections between client and server");
                bootstrap.childHandler(new OptionalSecureInitializer(this, clientEnc));
            }
            else
            {
                logger.info("Enabling encrypted CQL connections between client and server");
                bootstrap.childHandler(new SecureInitializer(this, clientEnc));
            }
        }
        else
        {
            bootstrap.childHandler(new Initializer(this));
        }

        // Bind and start to accept incoming connections.
        logger.info("Using Netty Version: {}", Version.identify().entrySet());
        logger.info("Starting listening for CQL clients on {}...", socket);

        ChannelFuture bindFuture = bootstrap.bind(socket);
        if (!bindFuture.awaitUninterruptibly().isSuccess())
            throw new IllegalStateException(String.format("Failed to bind port %d on %s.", socket.getPort(), socket.getAddress().getHostAddress()));

        connectionTracker.allChannels.add(bindFuture.channel());
        isRunning.set(true);

        StorageService.instance.setRpcReady(true);
    }
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b08504;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a08504;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c08504
<<<<<<< MINE
            if (logger.isDebugEnabled())
                logger.debug("Executing: {} with values {}", query, formatAllValues(values));
=======
            logger.info("Executing: {} with values {}", query, formatAllValues(values));
            if (reusePrepared)
            {
                rs = QueryProcessor.executeInternal(query, transformValues(values));

                // If a test uses a "USE ...", then presumably its statements use relative table. In that case, a USE
                // change the meaning of the current keyspace, so we don't want a following statement to reuse a previously
                // prepared statement at this wouldn't use the right keyspace. To avoid that, we drop the previously
                // prepared statement.
                if (query.startsWith("USE"))
                    QueryProcessor.clearInternalStatementsCache();
            }
            else
            {
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b03124;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a03124;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c03124
<<<<<<< MINE
    /** Maximum difference in generation and version values we are willing to accept about a peer */
=======
    // Maximimum difference between generation value and local time we are willing to accept about a peer
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b00204;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a00204;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c00204
<<<<<<< MINE
            if (server.eventExecutorGroup != null)
=======
            // The exceptionHandler will take care of handling exceptionCaught(...) events while still running
            // on the same EventLoop as all previous added handlers in the pipeline. This is important as the used
            // eventExecutorGroup may not enforce strict ordering for channel events.
            // As the exceptionHandler runs in the EventLoop as the previous handlers we are sure all exceptions are
            // correctly handled before the handler itself is removed.
            // See https://issues.apache.org/jira/browse/CASSANDRA-13649
            pipeline.addLast("exceptionHandler", exceptionHandler);

>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b14040;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a14040;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c14040
<<<<<<< MINE
public int getTimeToLive(QueryOptions options) throws InvalidRequestException
    {
        if (timeToLive == null)
            return 0;

        ByteBuffer tval = timeToLive.bindAndGet(options);
        if (tval == null)
            throw new InvalidRequestException("Invalid null value of TTL");

        if (tval == ByteBufferUtil.UNSET_BYTE_BUFFER) // treat as unlimited
            return 0;

        try
        {
            Int32Type.instance.validate(tval);
        }
        catch (MarshalException e)
        {
            throw new InvalidRequestException("Invalid timestamp value: " + tval);
        }

        int ttl = Int32Type.instance.compose(tval);
        if (ttl < 0)
            throw new InvalidRequestException("A TTL must be greater or equal to 0, but was " + ttl);

        if (ttl > ExpiringCell.MAX_TTL)
            throw new InvalidRequestException(String.format("ttl is too large. requested (%d) maximum (%d)", ttl, ExpiringCell.MAX_TTL));

        return ttl;
    }
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b02884;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a02884;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c02884
<<<<<<< MINE
// 20 years in seconds
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b02884;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a02884;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c02884
<<<<<<< MINE
public int getTimeToLive(QueryOptions options) throws InvalidRequestException
    {
        if (timeToLive == null)
            return 0;

        ByteBuffer tval = timeToLive.bindAndGet(options);
        if (tval == null)
            throw new InvalidRequestException("Invalid null value of TTL");

        if (tval == ByteBufferUtil.UNSET_BYTE_BUFFER) // treat as unlimited
            return 0;

        try
        {
            Int32Type.instance.validate(tval);
        }
        catch (MarshalException e)
        {
            throw new InvalidRequestException("Invalid timestamp value: " + tval);
        }

        int ttl = Int32Type.instance.compose(tval);
        if (ttl < 0)
            throw new InvalidRequestException("A TTL must be greater or equal to 0, but was " + ttl);

        if (ttl > MAX_TTL)
            throw new InvalidRequestException(String.format("ttl is too large. requested (%d) maximum (%d)", ttl, MAX_TTL));

        return ttl;
    }
=======
>>>>>>> YOURS
C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_b13384;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_a13384;C:\Users\Alice Borner\Desktop\projects\cassandra\git\.merge_file_c13384
<<<<<<< MINE
// we assume the regular case here - all nodes are on 3.11
=======
>>>>>>> YOURS
